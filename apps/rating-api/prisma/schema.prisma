generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = env("DATABASE_URL")
}

model University {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name String @unique
  slug String @unique

  faculties Faculty[]
  teachers Teacher[]
  ratings Rating[]
}

model Faculty {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique
  slug String @unique

  universities University[]
  teachers Teacher[]
}

model Teacher {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique
  slug String @unique

  universityId Int
  university University @relation(fields: [universityId], references: [id])

  facultyId Int
  faculty Faculty @relation(fields: [facultyId], references: [id])

  ratings Rating[]
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ideally, we should have an enum for role field. Enums are not
  // supported right now since we are using sqlite for development.
  role String @default("USER")

  username String @unique
  email String @unique
  password String
  // hashedPassword String
  // salt String // this is to prevent collisions in hashedPassword with
  //different users with the same password
  firstName String?
  lastName String?

  ratings Rating[]
}

model Rating {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  score Int
  comment String
  meta String

  userId Int?
  user User? @relation(fields: [userId], references: [id])

  universityId Int?
  university University? @relation(fields: [universityId], references: [id])

  teacherId Int?
  teacher Teacher? @relation(fields: [teacherId], references: [id])
}