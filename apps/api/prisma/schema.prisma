generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model University {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name String @unique
  slug String @unique

  faculties Faculty[]
  teachers Teacher[]
  ratings Rating[]
  users User[]

  domain Domain?
}

model Faculty {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique
  slug String @unique

  universities University[]
  teachers Teacher[]
  users User[]
}

model Teacher {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String

  universityId Int
  university University @relation(fields: [universityId], references: [id])

  facultyId Int
  faculty Faculty @relation(fields: [facultyId], references: [id])

  ratings Rating[]

  @@unique([name,slug,universityId,facultyId])

  // -- Only for role === TEACHER --

  userId Int? @unique
  user User?
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ideally, we should have an enum for role field. Enums are not
  // supported right now since we are using sqlite for development.
  role String @default("STUDENT")

  username String @unique
  email String @unique
  password String
  firstName String?
  lastName String?

  universityId Int?
  university University? @relation(fields: [universityId], references: [id])

  facultyId Int?
  faculty Faculty? @relation(fields: [facultyId], references: [id])

  ratings Rating[]

  // -- These are only for role === TEACHER --
  // -- For user with role === STUDENT, these fields will be null --

  // Comments that this teacher has created
  responses Response[]

  // Connection to the teacher model
  teacher Teacher? @relation(fields: [teacherId], references: [id])
  teacherId Int? @unique

  // Since we need to approve teachers, we should have a field to keep track this.
  // Otherwise, anyone can create a teacher account. This field will be set to true
  // when the admin approves the teacher. For new STUDENT users, this field will be
  // set to true.
  // Teacher users that are not approved will not be able to create responses. This
  // will be handled by creating a new Guard.
  isApproved Boolean @default(false)
}

model Rating {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  score Int
  comment String
  meta String

  userId Int
  user User @relation(fields: [userId], references: [id])

  universityId Int?
  university University? @relation(fields: [universityId], references: [id])

  teacherId Int?
  teacher Teacher? @relation(fields: [teacherId], references: [id])

  // Response that this rating has received from a teacher
  response Response?

  @@unique([userId,teacherId])
  @@unique([userId,universityId])
}

model Response {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  meta String

  // The rating that this comment is for
  toId Int @unique
  to Rating @relation(fields: [toId], references: [id])

  // The user (teacher) that has created this comment
  fromId Int
  from User @relation(fields: [fromId], references: [id])
}

model Domain {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique
  universityId Int @unique
  university University @relation(fields: [universityId], references: [id])
}